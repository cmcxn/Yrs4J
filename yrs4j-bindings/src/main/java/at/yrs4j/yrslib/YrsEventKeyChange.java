package at.yrs4j.yrslib;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libyrs.h:631</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class YrsEventKeyChange extends Structure {
	/**
	 * A UTF8-encoded null-terminated string containing a key of a changed entry.<br>
	 * C type : const char*
	 */
	public Pointer key;
	/**
	 * Tag field informing about type of change current struct refers to:
<br>
	 * <br>
	 * 1. `Y_EVENT_KEY_CHANGE_ADD` used to identify a newly added entry. In this case an
<br>
	 * `old_value` field is NULL, while `new_value` field contains an inserted value.
<br>
	 * 1. `Y_EVENT_KEY_CHANGE_DELETE` used to identify an existing entry being removed. In this
<br>
	 * case an `old_value` field contains the removed value.
<br>
	 * 1. `Y_EVENT_KEY_CHANGE_UPDATE` used to identify an existing entry, which value has been
<br>
	 * changed. In this case `old_value` field contains replaced value, while `new_value` contains
<br>
	 * a newly inserted one.
	 */
	public byte tag;
	/**
	 * Contains a removed entry's value or replaced value of an updated entry.<br>
	 * C type : YrsOutput*
	 */
	public YrsOutput.ByReference old_value;
	/**
	 * Contains a value of newly inserted entry or an updated entry's new value.<br>
	 * C type : YrsOutput*
	 */
	public  YrsOutput.ByReference new_value;
	public YrsEventKeyChange() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("key", "tag", "old_value", "new_value");
	}
	/**
	 * @param key A UTF8-encoded null-terminated string containing a key of a changed entry.<br>
	 * C type : const char*<br>
	 * @param tag Tag field informing about type of change current struct refers to:
<br>
	 * <br>
	 * 1. `Y_EVENT_KEY_CHANGE_ADD` used to identify a newly added entry. In this case an
<br>
	 * `old_value` field is NULL, while `new_value` field contains an inserted value.
<br>
	 * 1. `Y_EVENT_KEY_CHANGE_DELETE` used to identify an existing entry being removed. In this
<br>
	 * case an `old_value` field contains the removed value.
<br>
	 * 1. `Y_EVENT_KEY_CHANGE_UPDATE` used to identify an existing entry, which value has been
<br>
	 * changed. In this case `old_value` field contains replaced value, while `new_value` contains
<br>
	 * a newly inserted one.<br>
	 * @param old_value Contains a removed entry's value or replaced value of an updated entry.<br>
	 * C type : YrsOutput*<br>
	 * @param new_value Contains a value of newly inserted entry or an updated entry's new value.<br>
	 * C type : YrsOutput*
	 */
	public YrsEventKeyChange(Pointer key, byte tag, YrsOutput.ByReference old_value, YrsOutput.ByReference new_value) {
		super();
		this.key = key;
		this.tag = tag;
		this.old_value = old_value;
		this.new_value = new_value;
	}
	public static class ByReference extends YrsEventKeyChange implements Structure.ByReference {
		
	}

	public static class ByValue extends YrsEventKeyChange implements Structure.ByValue {
		
	}
}
