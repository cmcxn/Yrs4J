package at.yrs4j.yrslib;
import com.sun.jna.Pointer;
import com.sun.jna.Union;
/**
 * <i>native declaration : libyrs.h:693</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class YrsBranchIdVariant extends Union {
	/** Clock number timestamp when the creator of a nested shared type created it. */
	public int clock;
	/**
	 * Pointer to UTF-8 encoded string representing root-level type name. This pointer is valid
<br>
	 * as long as document - in which scope it was created in - was not destroyed. As usually
<br>
	 * root-level type names are statically allocated strings, it can also be supplied manually
<br>
	 * from the outside.<br>
	 * C type : const uint8_t*
	 */
	public Pointer name;
	public YrsBranchIdVariant() {
		super();
	}
	/**
	 * @param name Pointer to UTF-8 encoded string representing root-level type name. This pointer is valid
<br>
	 * as long as document - in which scope it was created in - was not destroyed. As usually
<br>
	 * root-level type names are statically allocated strings, it can also be supplied manually
<br>
	 * from the outside.<br>
	 * C type : const uint8_t*
	 */
	public YrsBranchIdVariant(Pointer name) {
		super();
		this.name = name;
		setType(Pointer.class);
	}
	/** @param clock Clock number timestamp when the creator of a nested shared type created it. */
	public YrsBranchIdVariant(int clock) {
		super();
		this.clock = clock;
		setType(Integer.TYPE);
	}
	public static class ByReference extends YrsBranchIdVariant implements com.sun.jna.Structure.ByReference {
		
	}

	public static class ByValue extends YrsBranchIdVariant implements com.sun.jna.Structure.ByValue {
		
	}
}
