package at.yrs4j.yrslib;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libyrs.h:669</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class YrsUndoEvent extends Structure {
	/**
	 * Informs if current event is related to executed undo (`Y_KIND_UNDO`) or redo (`Y_KIND_REDO`)
<br>
	 * operation.
	 */
	public byte kind;
	/**
	 * Origin assigned to a transaction, in context of which this event is being executed.
<br>
	 * YrsTransaction origin is specified via `ydoc_write_transaction(doc, origin_len, origin)`.<br>
	 * C type : const char*
	 */
	public Pointer origin;
	/**
	 * Length of an `origin` field assigned to a transaction, in context of which this event is
<br>
	 * being executed.
<br>
	 * YrsTransaction origin is specified via `ydoc_write_transaction(doc, origin_len, origin)`.
	 */
	public int origin_len;
	/**
	 * Pointer to a custom metadata object that can be passed between
<br>
	 * `yundo_manager_observe_popped` and `yundo_manager_observe_added`. It's useful for passing
<br>
	 * around custom user data ie. cursor position, that needs to be remembered and restored as
<br>
	 * part of undo/redo operations.
<br>
	 * <br>
	 * This field always starts with no value (`NULL`) assigned to it and can be set/unset in
<br>
	 * corresponding callback calls. In such cases it's up to a programmer to handle allocation
<br>
	 * and deallocation of memory that this pointer will point to. Not releasing it properly may
<br>
	 * lead to memory leaks.<br>
	 * C type : void*
	 */
	public Pointer meta;
	public YrsUndoEvent() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("kind", "origin", "origin_len", "meta");
	}
	/**
	 * @param kind Informs if current event is related to executed undo (`Y_KIND_UNDO`) or redo (`Y_KIND_REDO`)
<br>
	 * operation.<br>
	 * @param origin Origin assigned to a transaction, in context of which this event is being executed.
<br>
	 * YrsTransaction origin is specified via `ydoc_write_transaction(doc, origin_len, origin)`.<br>
	 * C type : const char*<br>
	 * @param origin_len Length of an `origin` field assigned to a transaction, in context of which this event is
<br>
	 * being executed.
<br>
	 * YrsTransaction origin is specified via `ydoc_write_transaction(doc, origin_len, origin)`.<br>
	 * @param meta Pointer to a custom metadata object that can be passed between
<br>
	 * `yundo_manager_observe_popped` and `yundo_manager_observe_added`. It's useful for passing
<br>
	 * around custom user data ie. cursor position, that needs to be remembered and restored as
<br>
	 * part of undo/redo operations.
<br>
	 * <br>
	 * This field always starts with no value (`NULL`) assigned to it and can be set/unset in
<br>
	 * corresponding callback calls. In such cases it's up to a programmer to handle allocation
<br>
	 * and deallocation of memory that this pointer will point to. Not releasing it properly may
<br>
	 * lead to memory leaks.<br>
	 * C type : void*
	 */
	public YrsUndoEvent(byte kind, Pointer origin, int origin_len, Pointer meta) {
		super();
		this.kind = kind;
		this.origin = origin;
		this.origin_len = origin_len;
		this.meta = meta;
	}
	public static class ByReference extends YrsUndoEvent implements Structure.ByReference {
		
	}

	public static class ByValue extends YrsUndoEvent implements Structure.ByValue {
		
	}
}
