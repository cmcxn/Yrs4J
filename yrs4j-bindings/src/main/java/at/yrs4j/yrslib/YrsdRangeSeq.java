package at.yrs4j.yrslib;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libyrs.h:256</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class YrsdRangeSeq extends Structure {
	/** Number of ranges stored in this sequence. */
	public int len;
	/**
	 * Array (length is stored in `len` field) or ranges. Each range is a pair of [start, end)
<br>
	 * values, describing continuous collection of items produced by the same client, identified
<br>
	 * by clock values, that this range refers to.<br>
	 * C type : YrsIdRange*
	 */
	public YrsIdRange.ByReference seq;
	public YrsdRangeSeq() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("len", "seq");
	}
	/**
	 * @param len Number of ranges stored in this sequence.<br>
	 * @param seq Array (length is stored in `len` field) or ranges. Each range is a pair of [start, end)
<br>
	 * values, describing continuous collection of items produced by the same client, identified
<br>
	 * by clock values, that this range refers to.<br>
	 * C type : YrsIdRange*
	 */
	public YrsdRangeSeq(int len, YrsIdRange.ByReference seq) {
		super();
		this.len = len;
		this.seq = seq;
	}
	public static class ByReference extends YrsdRangeSeq implements Structure.ByReference {
		
	}

    public static class ByValue extends YrsdRangeSeq implements Structure.ByValue {
		
	}
}
