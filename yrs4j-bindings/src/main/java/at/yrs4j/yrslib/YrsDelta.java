package at.yrs4j.yrslib;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libyrs.h:556</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class YrsDelta extends Structure {
	/**
	 * Tag field used to identify particular type of change made:
<br>
	 * <br>
	 * 1. `Y_EVENT_CHANGE_ADD` marks a new elements added to a collection. In this case `values`
<br>
	 * field contains a pointer to a list of newly inserted values, while `len` field informs about
<br>
	 * their count.
<br>
	 * 2. `Y_EVENT_CHANGE_DELETE` marks an existing elements removed from the collection. In this
<br>
	 * case `len` field informs about number of removed elements.
<br>
	 * 3. `Y_EVENT_CHANGE_RETAIN` marks a number of elements that have not been changed, counted
<br>
	 * from the previous element. `len` field informs about number of retained elements.
	 */
	public byte tag;
	/**
	 * Number of element affected by current type of a change. It can refer to a number of
<br>
	 * inserted `values`, number of deleted element or a number of retained (unchanged) values.
	 */
	public int len;
	/**
	 * Used in case when current change is of `Y_EVENT_CHANGE_ADD` type. Contains a list (of
<br>
	 * length stored in `len` field) of newly inserted values.<br>
	 * C type : YrsOutput*
	 */
	public YrsOutput.ByReference insert;
	/** A number of formatting attributes assigned to an edited area represented by this delta. */
	public int attributes_len;
	/**
	 * A nullable pointer to a list of formatting attributes assigned to an edited area represented
<br>
	 * by this delta.<br>
	 * C type : YrsDeltaAttr*
	 */
	public YrsDeltaAttr.ByReference attributes;
	public YrsDelta() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("tag", "len", "insert", "attributes_len", "attributes");
	}
	/**
	 * @param tag Tag field used to identify particular type of change made:
<br>
	 * <br>
	 * 1. `Y_EVENT_CHANGE_ADD` marks a new elements added to a collection. In this case `values`
<br>
	 * field contains a pointer to a list of newly inserted values, while `len` field informs about
<br>
	 * their count.
<br>
	 * 2. `Y_EVENT_CHANGE_DELETE` marks an existing elements removed from the collection. In this
<br>
	 * case `len` field informs about number of removed elements.
<br>
	 * 3. `Y_EVENT_CHANGE_RETAIN` marks a number of elements that have not been changed, counted
<br>
	 * from the previous element. `len` field informs about number of retained elements.<br>
	 * @param len Number of element affected by current type of a change. It can refer to a number of
<br>
	 * inserted `values`, number of deleted element or a number of retained (unchanged) values.<br>
	 * @param insert Used in case when current change is of `Y_EVENT_CHANGE_ADD` type. Contains a list (of
<br>
	 * length stored in `len` field) of newly inserted values.<br>
	 * C type : YrsOutput*<br>
	 * @param attributes_len A number of formatting attributes assigned to an edited area represented by this delta.<br>
	 * @param attributes A nullable pointer to a list of formatting attributes assigned to an edited area represented
<br>
	 * by this delta.<br>
	 * C type : YrsDeltaAttr*
	 */
	public YrsDelta(byte tag, int len, YrsOutput.ByReference insert, int attributes_len, YrsDeltaAttr.ByReference attributes) {
		super();
		this.tag = tag;
		this.len = len;
		this.insert = insert;
		this.attributes_len = attributes_len;
		this.attributes = attributes;
	}
	public static class ByReference extends YrsDelta implements Structure.ByReference {
		
	}

	public static class ByValue extends YrsDelta implements Structure.ByValue {
		
	}
}
