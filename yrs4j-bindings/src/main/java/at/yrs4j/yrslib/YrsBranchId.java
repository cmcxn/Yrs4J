package at.yrs4j.yrslib;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libyrs.h:710</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class YrsBranchId extends Structure {
	/**
	 * If positive: Client ID of a creator of a nested shared type, this identifier points to.
<br>
	 * If negative: a negated Length of a root-level shared collection name.
	 */
	public long client_or_len;
	/** C type : YrsBranchIdVariant */
	public YrsBranchIdVariant variant;
	public YrsBranchId() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("client_or_len", "variant");
	}
	/**
	 * @param client_or_len If positive: Client ID of a creator of a nested shared type, this identifier points to.
<br>
	 * If negative: a negated Length of a root-level shared collection name.<br>
	 * @param variant C type : YrsBranchIdVariant
	 */
	public YrsBranchId(long client_or_len, YrsBranchIdVariant variant) {
		super();
		this.client_or_len = client_or_len;
		this.variant = variant;
	}
	public static class ByReference extends YrsBranchId implements Structure.ByReference {
		
	}

    public static class ByValue extends YrsBranchId implements Structure.ByValue {
		
	}
}
